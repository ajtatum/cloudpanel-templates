server {
	listen 80;
	listen [::]:80;
	listen 443 ssl http2;
	listen [::]:443 ssl http2;
	{{ssl_certificate}}
	server_name mydomain.com;
	{{root}}

	{{nginx_access_log}}
	{{nginx_error_log}}

	if ($scheme != "https") {
		rewrite ^ https://$host$uri permanent;
	}

	# Increase buffer size for large headers
	proxy_max_temp_file_size 0;
	proxy_connect_timeout 900;
	proxy_send_timeout 900;
	proxy_read_timeout 900;
	proxy_buffer_size 128k;
	proxy_buffers 4 256k;
	proxy_busy_buffers_size 256k;
	proxy_temp_file_write_size 256k;

	# Make sure not to redirect traffic to a port 4443
	port_in_redirect off;
	proxy_pass_request_headers on;

	{{settings}}

	add_header Cache-Control no-transform;

	index index.html;

	location ^~ /.well-known {
		auth_basic off;
		allow all;
		try_files $uri @reverse_proxy;
	}

	location / {
		# Put your proxy_pass to your application here
		proxy_pass {{reverse_proxy_url}};
		proxy_http_version 1.1;
		# Proxy Header Settings
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection "Upgrade";
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto $scheme;
		proxy_set_header X-Forwarded-Host $host;
		proxy_set_header X-Forwarded-Port $server_port;
		proxy_set_header X-Forwarded-Server $host;
		proxy_set_header X-Forwarded-Uri $request_uri;
		proxy_set_header X-Forwarded-Method $request_method;
		proxy_set_header X-Forwarded-Ssl on;
		proxy_set_header Host $http_host;
		proxy_set_header X-Original-Method $request_method;
		proxy_set_header X-Original-URL $scheme://$http_host$request_uri;

		# Proxy Cache and Cookie Settings
		proxy_cache_bypass $cookie_session;
		#proxy_cookie_path / "/; Secure"; # enable at your own risk, may break certain apps
		proxy_no_cache $cookie_session;

		##############################
		# authentik-specific config
		##############################
		auth_request /outpost.goauthentik.io/auth/nginx;
		error_page 401 = @goauthentik_proxy_signin;
		auth_request_set $auth_cookie $upstream_http_set_cookie;
		add_header Set-Cookie $auth_cookie;

		# translate headers from the outposts back to the actual upstream
		auth_request_set $authentik_username $upstream_http_x_authentik_username;
		auth_request_set $authentik_groups $upstream_http_x_authentik_groups;
		auth_request_set $authentik_email $upstream_http_x_authentik_email;
		auth_request_set $authentik_name $upstream_http_x_authentik_name;
		auth_request_set $authentik_uid $upstream_http_x_authentik_uid;

		proxy_set_header X-authentik-username $authentik_username;
		proxy_set_header X-authentik-groups $authentik_groups;
		proxy_set_header X-authentik-email $authentik_email;
		proxy_set_header X-authentik-name $authentik_name;
		proxy_set_header X-authentik-uid $authentik_uid;

		try_files $uri @reverse_proxy;
	}

	# all requests to /outpost.goauthentik.io must be accessible without authentication
	location /outpost.goauthentik.io {
		proxy_pass http://100.74.131.114:9080/outpost.goauthentik.io;
		# ensure the host of this vserver matches your external URL you've configured
		# in authentik
		proxy_set_header Host $host;
		proxy_set_header X-Original-URL $scheme://$http_host$request_uri;
		add_header Set-Cookie $auth_cookie;
		auth_request_set $auth_cookie $upstream_http_set_cookie;
		proxy_pass_request_body off;
		proxy_set_header Content-Length "";
	}

	# Special location for when the /auth endpoint returns a 401,
	# redirect to the /start URL which initiates SSO
	location @goauthentik_proxy_signin {
		internal;
		add_header Set-Cookie $auth_cookie;
		return 302 /outpost.goauthentik.io/start?rd=$request_uri;
		# For domain level, use the below error_page to redirect to your authentik server with the full redirect path
		# return 302 https://authentik.company/outpost.goauthentik.io/start?rd=$scheme://$http_host$request_uri;
	}
}
